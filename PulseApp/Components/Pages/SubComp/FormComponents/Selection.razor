@using Domain
@using Domain.DTO

<div class="entity-selector">
    <div class="form-floating mb-3">
        <input type="text" @bind-value="SelectedEntity" @onfocus="ShowPanel" class="main-input"  />
        <label for="floatingInput" class="always-float">@Label</label>
    </div>

    @if (showPanel)
    {
        <div class="dropdown-panel" @onblur="HidePanel">
            <input type="text" @bind="searchQuery" @bind:event="oninput" @bind:after="FilterEntities" placeholder="Поиск..." class="search-input" />

            <ul class="entity-list">
                @foreach (var entity in filteredEntities)
                {
                    <li class="entity-item" @onclick="() => SelectEntity(entity)">
                        <div style="display: flex; justify-content: space-between;" >
                            @entity.ToString()
                            @if (IsMultySelection && selectedEntities.Contains(entity))
                            {
                                <svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" width="20" height="20" viewBox="0 0 24 24">
                                    <path d="M 20.292969 5.2929688 L 9 16.585938 L 4.7070312 12.292969 L 3.2929688 13.707031 L 9 19.414062 L 21.707031 6.7070312 L 20.292969 5.2929688 z"></path>
                                </svg>
                            }
                        </div>
                    </li>
                }
            </ul>
        </div>
    }

    @if (!string.IsNullOrEmpty(SelectedEntity))
    {
        <button @onclick="ClearSelection" class="clear-button">×</button>
    }
</div>

<div class="overlay @(showPanel ? "active" : "")" @onclick="HidePanel"></div>

@code {
    [Parameter]
    public string SelectedEntity { get; set; } = string.Empty;
    private string searchQuery = string.Empty;
    private bool showPanel = false;
    [Parameter]
    public List<object> Entities { get; set; } 
    [Parameter]
    public EventCallback<object> SelectEntityCallback { get; set; }
    [Parameter]
    public EventCallback<List<object>> SelectSomeObject { get; set; }
    [Parameter]
    public string Placeholder { get; set; } = "Выберите сущность...";
    [Parameter]
    public string Label { get; set; } = string.Empty;
    [Parameter]
    public bool IsMultySelection { get; set; } = false;
    [Parameter]
    public List<object> selectedEntities { get; set; } = new();
    [Parameter]
    public string? PreSelectedEntityString { get; set; } = null;


    private List<object> filteredEntities { get; set; } = new();

    protected override void OnInitialized()
    {
        if (PreSelectedEntityString != null && PreSelectedEntityString != string.Empty)
            SelectedEntity = PreSelectedEntityString;

        filteredEntities = new(Entities);

        if (selectedEntities.Count != 0)
            SelectedEntity = string.Join(", ", selectedEntities.Select(e => e.ToString()));
    }

    private void ShowPanel()
    {
        showPanel = true;
    }

    private void HidePanel()
    {
        showPanel = false;
        searchQuery = string.Empty;
        filteredEntities = new(Entities);
    }

    private void FilterEntities()
    {
        filteredEntities = Entities.Where(e => e.ToString().ToLower().Contains(searchQuery.ToLower())).ToList();
        StateHasChanged();
    }

    private async Task SelectEntity(object entity)
    {
        if (!IsMultySelection)
        {
            SelectedEntity = entity.ToString();
            searchQuery = string.Empty;
            showPanel = false;
            await SelectEntityCallback.InvokeAsync(entity);
        }
        else
        {
            if (selectedEntities.Contains(entity))
                selectedEntities.Remove(entity);
            else
                selectedEntities.Add(entity);
            SelectedEntity = string.Join(", ", selectedEntities.Select(e => e.ToString()));
            await SelectSomeObject.InvokeAsync(selectedEntities);
            StateHasChanged();
        }
    }

    private async Task ClearSelection()
    {
        if (!IsMultySelection)
        {
            SelectedEntity = string.Empty;
            await SelectEntityCallback.InvokeAsync(null);
        }
        else
        {
            selectedEntities = new();
            SelectedEntity = string.Empty;
            await SelectSomeObject.InvokeAsync(selectedEntities);
        }
    }
}